--- a/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qeglfshooks_bcm.cpp
+++ b/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qeglfshooks_bcm.cpp
@@ -0,0 +1,204 @@
+#include "qeglfshooks.h"
+#include "qeglfscursor.h"
+
+#include <QtDebug>
+
+#include <QtPlatformSupport/private/qeglconvenience_p.h>
+#include <QtPlatformSupport/private/qeglplatformcontext_p.h>
+
+#include "nexus_platform.h"
+#include "nexus_display.h"
+#include "nexus_core_utils.h"
+#include "default_nexus.h"
+
+#include "refsw_session_simple_client.h"
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif //__cplusplus
+
+static unsigned int gs_screen_wdt = 1280;
+static unsigned int gs_screen_hgt = 720;
+
+static NEXUS_SurfaceClient* gs_nexus_display = 0;
+static void*                gs_native_window = 0;
+static NXPL_PlatformHandle  nxpl_handle = 0;
+
+bool InitPlatform ( void )
+{
+   NEXUS_Error error;
+   NEXUS_ClientAuthenticationSettings authSettings;
+   
+   simple_client_init("xre", &authSettings);
+
+   error = NEXUS_Platform_AuthenticatedJoin(&authSettings);
+   if ( error )
+   {
+      qFatal ( "Error : NEXUS_Platform_AuthenticatedJoin() : %x ",  error );
+   }
+    
+   return true;
+}
+
+/*
+NEXUS_DisplayHandle OpenDisplay ( NEXUS_VideoFormat format )
+{
+
+   NEXUS_DisplayHandle   display = NULL;
+   NEXUS_DisplaySettings display_settings;
+
+   NEXUS_Display_GetDefaultSettings ( &display_settings );
+
+   if ( format != 0 )
+   {
+      display_settings.format = format;
+   }
+
+   return display;
+}
+*/
+
+bool InitDisplay ( void )
+{
+//   NXPL_NativeWindowInfo win_info;
+
+   if ( InitPlatform () == false )
+   {
+       qFatal ( "Error : InitPlatform()" );
+//       return false;
+   }
+
+   NXPL_RegisterNexusDisplayPlatform ( &nxpl_handle, gs_nexus_display );
+
+/*
+   gs_screen_wdt     = 1280;
+   gs_screen_hgt     = 720;
+
+   win_info.x        = 0; 
+   win_info.y        = 0;
+   win_info.width    = gs_screen_wdt;
+   win_info.height   = gs_screen_hgt;
+   win_info.stretch  = true;
+   win_info.clientID = 0; //FIXME hardcoding
+
+   gs_native_window = NXPL_CreateNativeWindow ( &win_info );
+*/
+
+   return true;
+}
+
+void* NativeWindowHandle ( void )
+{
+   return gs_native_window;
+}
+
+void DeInitPlatform ( void )
+{
+   if ( gs_nexus_display != 0 )
+   {
+       NXPL_UnregisterNexusDisplayPlatform ( nxpl_handle );
+       NEXUS_SurfaceClient_Release ( gs_nexus_display );
+   }
+
+   NEXUS_Platform_Uninit ();
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+QT_BEGIN_NAMESPACE
+
+class QEglFSBCMHooks : public QEglFSHooks
+{
+public:
+   virtual void platformInit ();
+   virtual void platformDestroy ();
+   virtual EGLNativeDisplayType platformDisplay () const;
+   virtual QSize screenSize () const;
+   virtual EGLNativeWindowType createNativeWindow ( QPlatformWindow* window, const QSize &size, const QSurfaceFormat &format );
+   virtual void destroyNativeWindow ( EGLNativeWindowType window );
+   virtual bool hasCapability ( QPlatformIntegration::Capability cap ) const;
+   virtual QSurfaceFormat surfaceFormatFor ( const QSurfaceFormat &inputFormat ) const;
+};
+
+void QEglFSBCMHooks::platformInit ()
+{
+   InitDisplay ();
+}
+
+EGLNativeDisplayType QEglFSBCMHooks::platformDisplay () const
+{
+   return EGL_DEFAULT_DISPLAY;
+}
+
+void QEglFSBCMHooks::platformDestroy ()
+{
+   DeInitPlatform ();
+}
+
+QSize QEglFSBCMHooks::screenSize() const
+{
+   return QSize ( gs_screen_wdt, gs_screen_hgt );
+}
+
+EGLNativeWindowType QEglFSBCMHooks::createNativeWindow ( QPlatformWindow *window, const QSize &size, const QSurfaceFormat &format )
+{
+   Q_UNUSED(window)
+   Q_UNUSED(size)
+   Q_UNUSED(format);
+
+   NXPL_NativeWindowInfo win_info;
+
+   win_info.x        = 0; 
+   win_info.y        = 0;
+   win_info.width    = gs_screen_wdt;
+   win_info.height   = gs_screen_hgt;
+   win_info.stretch  = true;
+   win_info.clientID = 0; //FIXME hardcoding
+
+   gs_native_window = NXPL_CreateNativeWindow ( &win_info );
+
+   return ( EGLNativeWindowType ) gs_native_window;
+}
+
+void QEglFSBCMHooks::destroyNativeWindow ( EGLNativeWindowType window )
+{
+   Q_UNUSED ( window )
+
+   NXPL_DestroyNativeWindow ( gs_native_window );
+}
+
+bool QEglFSBCMHooks::hasCapability(QPlatformIntegration::Capability cap) const
+{
+   switch ( cap )
+   {
+      case QPlatformIntegration::ThreadedPixmaps      :
+      case QPlatformIntegration::OpenGL               :
+      case QPlatformIntegration::ThreadedOpenGL       :
+      case QPlatformIntegration::BufferQueueingOpenGL :
+         return true;
+      default                                         :
+         return false;
+   }
+}
+
+QSurfaceFormat QEglFSBCMHooks::surfaceFormatFor ( const QSurfaceFormat &inputFormat ) const
+{
+   QSurfaceFormat format = inputFormat;
+
+   format.setDepthBufferSize(24);
+   format.setStencilBufferSize(8);
+   format.setRedBufferSize(8);
+   format.setGreenBufferSize(8);
+   format.setBlueBufferSize(8);
+   format.setAlphaBufferSize(8);
+
+   return format;
+}
+
+QEglFSBCMHooks eglFSBCMHooks;
+QEglFSHooks* platformHooks = &eglFSBCMHooks;
+
+QT_END_NAMESPACE
